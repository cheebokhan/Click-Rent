import { Card, CardContent, CardHeader } from "@material-ui/core";
import React, { useState, useEffect } from "react";
import Table from "../../../../../components/table";
import { getTranslation } from "../../../../../heplers/translationHelper";
import { Box, IconButton, Tooltip, Typography } from "@material-ui/core";
import { AddPostDueDate } from "../../addPostponDueDate";
import { ReminderToAll, PostponIcon } from "../../../../../components/icons";
import { DownloadFile, Post } from "../../../../../actions";
import { Post_PostPoneDue_URL } from "../../../../../constants/apiUrls";
import { useSnackbar } from "notistack";
import { format } from "../../../../../heplers/format";
import { DownloadButton } from "../../../../../components/ButttonsWithIcons";

const columns = [
  {
    id: "date",
    numeric: false,
    disablePadding: true,
    label: getTranslation("Date", "Date", "Date"),
    format: "date",
    component:({row})=>{
      return <>
      <Typography>{format("date",row.date)}</Typography>
      <Typography variant="caption" style={{color:"red"}}>{row.postponedReason}</Typography>
      </>
    }
  },
  {
    id: "activity",
    numeric: false,
    disablePadding: true,
    label: getTranslation("Activity", "Type", "Typ"),
    component:({row})=><Typography> {getTranslation(row.activity,row.activity,row.activity)}</Typography>
  },
  {
    id: "description",
    numeric: false,
    disablePadding: true,
    label: getTranslation("Description", "La description", "Beschreibung"),
    component: ({ row }) => {
    
    const descriptions = row.description
    .split(/\s*\d+\s*\|\s*/)
    .map(description => description.trim())

  // Joining the updated descriptions
  const updatedDescription = descriptions.join(' | ');

    return (
        <Typography>
          {
          updatedDescription.replace("Amount from","").replace("Account","").replace("|","")
          .replace("Generated By Admin",getTranslation("Generated By Admin","Transation générée par le system ","Operation vom System generiert"))
          }
        </Typography>
    );
     },
  },

  {
    id: "dueGenerated",
    numeric: true,
    disablePadding: true,
    label: getTranslation("Due", "Montant d�", "Zu zahlen"),
    format: "number",
    align: "right",
  },
  {
    id: "amountDeposit",
    label: getTranslation("Bank", "Banque", "Bank"),
    format: "number",
    align: "right",
  },
  // {
  //   id: "balance",
  //   numeric: false,
  //   disablePadding: true,
  //   label: getTranslation("Balance", "Solde", "Saldo"),
  //   format: "number",
  //   align: "right",
  // },
  {
    id: "actions",
    label: getTranslation("Action", "Action", "Action"),
    align: "right",
  },
];

const Details = ({ tenantId, loading, rows, onFilter }) => {
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(
    localStorage.getItem("sizeDue")
  );
  const [searchString, setSearchString] = useState("");
  const [sort, setSort] = useState("date");
  const [sortDirection, setSortDirection] = useState(1);
  const [addPostponDueDate, setAddPostponDueDate] = useState(false);
  const [due, setDue] = useState(null);

  useEffect(() => {
    onFilter({
      searchString,
      pageNumber: page,
      pageSize: rowsPerPage,
      sort: sort,
      sortDirection: sortDirection,
      tenantId: tenantId,
    });
  }, [page, searchString, rowsPerPage, sort, sortDirection]);
  //handlers
  const handleChangePage = (newPage) => {
    setPage(newPage);
  };
  const handleChangeRowsPerPage = (event) => {
    localStorage.setItem("sizeDue", parseInt(event.target.value));

    setRowsPerPage(localStorage.getItem("sizeDue"));
    setPage(0);
  };
  const handleSearchDetails = (searchString) => {
    setSearchString(searchString);
  };

  const handleAddPostponDueDate = (rowData) => {
    setDue(rowData)
    setAddPostponDueDate(true);
  };

  const { enqueueSnackbar } = useSnackbar();
  const handlePostPoneDue=(value,actions)=>{
    Post(
      value,
      Post_PostPoneDue_URL,
      null,
      resp=>{
        setAddPostponDueDate(false)
        enqueueSnackbar(resp.data,{variant:"success"})
        actions.setSubmitting(false);
        actions.resetForm();
        setDue({})
        onFilter({
          searchString,
          pageNumber: page,
          pageSize: rowsPerPage,
          sort: sort,
          sortDirection: sortDirection,
          tenantId: tenantId,
        });
      },
      error=>{
        enqueueSnackbar(error.data,{variant:"error"})
        actions.setSubmitting(false);
      }
    )
  }

  return (
    <>
      <Card>
        <CardHeader title={getTranslation("Dues", "Droits", "Geb�hren")} />
        <CardContent>
          <Table
            loading={loading}
            dense
            colums={columns}
            sortBy="date"
            sortDirection="desc"
            onSorting={(property, direction) => {
              setSort(property);
              setSortDirection(direction === "asc" ? 0 : 1);
            }}
            rows={rows?.data}
            count={rows?.totalCount}
            page={page}
            rowsPerPage={rowsPerPage}
            handleChangePage={handleChangePage}
            handleChangeRowsPerPage={handleChangeRowsPerPage}
            viewSearch
            onSearch={(searchString) => handleSearchDetails(searchString)}
            actions={
              [
                {
                  component: (row) => ( row.pdfDocumentId!=''?
                    <Tooltip
                      title={getTranslation("Note", "Noter", "Notiz")}
                      arrow
                      placement="top"
                    >
                     <DownloadButton onClick={()=>DownloadFile(row?.pdfDocumentId)}/>
                    </Tooltip>:null
                  ),
                },
                {
                  component: (rowData) => (
                    <Tooltip
                      title={getTranslation(
                        "Postpone Due Date",
                        "G�n�rer un rapport de construction",
                        "Geb�udebericht erstellen"
                      )}
                      arrow
                      placement="left-start"
                    >
                      <IconButton>
                        <PostponIcon
                          onClick={() => {
                            handleAddPostponDueDate(rowData);
                          }}
                        />
                      </IconButton>
                    </Tooltip>
                  ),
                },
              ]
            }
          />
        </CardContent>
      </Card>

      <AddPostDueDate
      due={due}
        isOpen={addPostponDueDate}
        onClose={() => {
          setAddPostponDueDate(false)
          setDue({})
        }}
        onSubmit={handlePostPoneDue}
      />
    </>
  );
};
export default Details;
